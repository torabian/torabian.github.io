"use strict";(self.webpackChunktorabi_io=self.webpackChunktorabi_io||[]).push([[7339],{5215:e=>{e.exports=JSON.parse('{"permalink":"/blog/ats-01-standard-react-native-list","editUrl":"https://github.com/torabian/torabian.github.io/tree/main/packages/create-docusaurus/templates/shared/blog/ats-01-standard-react-native-list.mdx","source":"@site/blog/ats-01-standard-react-native-list.mdx","title":"ATS-01 Standard for React Native List based projects","description":"ATS-01 is a set of rules, which will be granted into any list, if it meets certain level of the conditions.","date":"2025-10-08T20:40:30.000Z","tags":[],"readingTime":2.65,"hasTruncateMarker":false,"authors":[{"name":"Ali Torabi","key":null,"page":null}],"frontMatter":{"title":"ATS-01 Standard for React Native List based projects","author":"Ali Torabi","excerpt":"Set of rules to follow and check against for high quality, low maintenance react native lists screens. By implementing these rules, you make sure every screen in your app has a good UI experience for the user.","lang":"en"},"unlisted":false,"prevItem":{"title":"7 Reasons why Golang is the best backend programming language","permalink":"/blog/7-reasons-why-Golang-is-the-best-backend-programming-language"},"nextItem":{"title":"Honest comparision of hybrid app vs. Native finally","permalink":"/blog/honest-comparision-of-hybrid-app-vs-native-finally"}}')},6429:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>h});var i=n(5215),a=n(4848),r=n(8453);const s={title:"ATS-01 Standard for React Native List based projects",author:"Ali Torabi",excerpt:"Set of rules to follow and check against for high quality, low maintenance react native lists screens. By implementing these rules, you make sure every screen in your app has a good UI experience for the user.",lang:"en"},o=void 0,l={authorsImageUrls:[void 0]},h=[{value:"Why the lists are important?",id:"why-the-lists-are-important",level:2},{value:"Conditions to meet ATS-01",id:"conditions-to-meet-ats-01",level:2},{value:"Only in React Native framework",id:"only-in-react-native-framework",level:3},{value:"By FlatList or other virtual list",id:"by-flatlist-or-other-virtual-list",level:3},{value:"Error handling for first-fetch strategy",id:"error-handling-for-first-fetch-strategy",level:3},{value:"Error handling when a set of data is present to the user",id:"error-handling-when-a-set-of-data-is-present-to-the-user",level:3},{value:"Empty list strategy",id:"empty-list-strategy",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Skeleton loader",id:"skeleton-loader",level:3},{value:"Taking too long indication",id:"taking-too-long-indication",level:3},{value:"Timeout and retry mechanism",id:"timeout-and-retry-mechanism",level:3},{value:"Request cancellation on leaving the screen",id:"request-cancellation-on-leaving-the-screen",level:3}];function d(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["ATS-01 is a set of rules, which will be granted into any list, if it meets certain level of the conditions.\nLack of quality in many products which we see, is due to missing full implementation of these rules.\n",(0,a.jsx)(t.em,{children:"You might already have this rules available in your app"})," - therefor no need to make adjustments just to use this document\nas reference."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Technologies"}),": React Native"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Programming Languages"}),": JavaScript/TypeScript"]}),"\n",(0,a.jsx)(t.h2,{id:"why-the-lists-are-important",children:"Why the lists are important?"}),"\n",(0,a.jsx)(t.p,{children:"Mobile applications are built heavily around lists. In a mobile device, user is usually swiping vertically and less often horizontally.\nThus, software companies need to focus on building better lists which interacts more smoothly."}),"\n",(0,a.jsx)(t.h2,{id:"conditions-to-meet-ats-01",children:"Conditions to meet ATS-01"}),"\n",(0,a.jsx)(t.p,{children:"Here is the interactive list of ATS-01 standard. ATS-01 is met when the screen must implement or be implemeneted:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Only in React Native framework"}),"\n",(0,a.jsx)(t.li,{children:"By FlatList or other virtual list"}),"\n",(0,a.jsx)(t.li,{children:"Error handling for first-fetch strategy"}),"\n",(0,a.jsx)(t.li,{children:"Error handling when a set of data is present to the user"}),"\n",(0,a.jsx)(t.li,{children:"Empty list strategy"}),"\n",(0,a.jsx)(t.li,{children:"Pagination"}),"\n",(0,a.jsx)(t.li,{children:"Skeleton loader"}),"\n",(0,a.jsx)(t.li,{children:"Taking too long indication"}),"\n",(0,a.jsx)(t.li,{children:"Timeout and retry mechanism"}),"\n",(0,a.jsx)(t.li,{children:"Request cancellation on leaving the screen"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"only-in-react-native-framework",children:"Only in React Native framework"}),"\n",(0,a.jsx)(t.p,{children:"The application needs to be written in React Native. Android/IOS/Ionic/Xamarin and etc are not accpted in this standard."}),"\n",(0,a.jsx)(t.h3,{id:"by-flatlist-or-other-virtual-list",children:"By FlatList or other virtual list"}),"\n",(0,a.jsxs)(t.p,{children:["Starndard only applies to screens which need to show dataset, usually from remote service or bluetooth, WIFI devices.\nIt does not apply to stationary elements, which are put in ",(0,a.jsx)(t.strong,{children:"ScrollView"})]}),"\n",(0,a.jsx)(t.p,{children:"Examples:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"List of posts"}),"\n",(0,a.jsx)(t.li,{children:"List of images"}),"\n",(0,a.jsx)(t.li,{children:"Bluetooth devices around"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"error-handling-for-first-fetch-strategy",children:"Error handling for first-fetch strategy"}),"\n",(0,a.jsx)(t.p,{children:"Screen needs to have a clear strategy, to show the errors occured while fetching information from remote, or any other\npermission issues, requirement in the first list."}),"\n",(0,a.jsx)(t.h3,{id:"error-handling-when-a-set-of-data-is-present-to-the-user",children:"Error handling when a set of data is present to the user"}),"\n",(0,a.jsx)(t.p,{children:"Screen should handle in case of subsequent failures of fetching data, or changes to parameters, and show them on top of the list,\nas header and give user clear action point to move next steps."}),"\n",(0,a.jsx)(t.h3,{id:"empty-list-strategy",children:"Empty list strategy"}),"\n",(0,a.jsxs)(t.p,{children:["Screen needs to clearly give user feedback if the remote list is empty.\n",(0,a.jsx)(t.strong,{children:"It should be different than network failures, other impediments precluding user to understand real data availabilty."})]}),"\n",(0,a.jsx)(t.h3,{id:"pagination",children:"Pagination"}),"\n",(0,a.jsxs)(t.p,{children:["The screen should load the data from it's remote based on user scroll threshold. Even if the remote source does not have such possiblity,\nyou need to make a ",(0,a.jsx)(t.code,{children:"PaginatableArray"})," out of it pass it to this component."]}),"\n",(0,a.jsx)(t.h3,{id:"skeleton-loader",children:"Skeleton loader"}),"\n",(0,a.jsx)(t.p,{children:"On the first pull, you need to have skeleton porportional to the real items implemented. User should not see a loader,\nwhile the screen is opened first time."}),"\n",(0,a.jsx)(t.h3,{id:"taking-too-long-indication",children:"Taking too long indication"}),"\n",(0,a.jsx)(t.p,{children:"In case loading of data is taking longer than usual, there should be indication of that, tell the user that they can\ncancel or retry in specific amount of time."}),"\n",(0,a.jsx)(t.h3,{id:"timeout-and-retry-mechanism",children:"Timeout and retry mechanism"}),"\n",(0,a.jsx)(t.p,{children:'It should be giving user message "Pull to retry" in case of failure in first or subsequent requests.'}),"\n",(0,a.jsx)(t.h3,{id:"request-cancellation-on-leaving-the-screen",children:"Request cancellation on leaving the screen"}),"\n",(0,a.jsx)(t.p,{children:"Screen needs to keep an strategy to clean up remote requests, BLE scanning, or any ongoing process to provide data\nin to screen, in case user tried to leave the screen."})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);