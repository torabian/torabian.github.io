<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Torabian Blog</title>
        <link>https://torabi.io/blog</link>
        <description>Torabian Blog</description>
        <lastBuildDate>Sun, 08 Jun 2025 18:33:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[7 Reasons why Golang is the best backend programming language]]></title>
            <link>https://torabi.io/blog/7-reasons-why-Golang-is-the-best-backend-programming-language</link>
            <guid>https://torabi.io/blog/7-reasons-why-Golang-is-the-best-backend-programming-language</guid>
            <pubDate>Sun, 08 Jun 2025 18:33:01 GMT</pubDate>
            <description><![CDATA[In case you never heared Golang before, it is a staticly typed, compiled language, which is developed by google]]></description>
            <content:encoded><![CDATA[<p>In case you never heared Golang before, it is a staticly typed, compiled language, which is developed by google
to reduce their need for C/C++ in web area. This language has some benefits over C/C++ besides seems to be true winner
win I compared it to other programming languages that I've worked with, such as PHP, C# and Node.js</p>
<p>Golang can be compiled for major OS available out there, plus some microcontrollers using TinyGo and mobile applications,
using Gomobile project. Today I am going to tell you the 8 major reasons we prefer go for our projects and clients.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-golang-has-a-simple-syntax">1. Golang has a simple syntax<a href="https://torabi.io/blog/7-reasons-why-Golang-is-the-best-backend-programming-language#1-golang-has-a-simple-syntax" class="hash-link" aria-label="Direct link to 1. Golang has a simple syntax" title="Direct link to 1. Golang has a simple syntax">​</a></h2>
<p>When you compare Golang with Java and C++, you just realize there are much lesser features in the language, No OOP,
and many flavors and options. In first glance all those tools seem to be handy, but for major use cases they are not needed
and only tend to complicated source code of a project, specially if it was borrowed or it's a legacy code.</p>
<p>This means faster development, and easier for new developers to learn and join the project.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-golang-produces-binary-files">2. Golang produces binary files<a href="https://torabi.io/blog/7-reasons-why-Golang-is-the-best-backend-programming-language#2-golang-produces-binary-files" class="hash-link" aria-label="Direct link to 2. Golang produces binary files" title="Direct link to 2. Golang produces binary files">​</a></h2>
<p>Hell yeah. When you are writting code in Node.js or Python, you always need the installation, dependency management and deploying
issues because they are scripts.</p>
<p>A well written Golang application, can be compiled into binary files (exe on Windows!) and it would be expected to run
for next few decases, without any changes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-high-performance-small-memory-footprint">3. High performance, small memory footprint<a href="https://torabi.io/blog/7-reasons-why-Golang-is-the-best-backend-programming-language#3-high-performance-small-memory-footprint" class="hash-link" aria-label="Direct link to 3. High performance, small memory footprint" title="Direct link to 3. High performance, small memory footprint">​</a></h2>
<p>When you write a node.js app, just in order to run it, you need to have somewhat serious mashine to run it, and right away gets a lot of memory and cpu usage
even for a hello world app. Golang binaries for small web applications are around 10-30 MB in a single executable file.</p>
<p>Comparing this to a Java web application, which right away needs 4GB of ram to run, and constantly needs hardware upgrade
and code maintenance while the server loads increases, might make you realize you could have better weekends writing
those applications into something C-level performant.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-commandline-and-webserver-together">4. CommandLine and WebServer together.<a href="https://torabi.io/blog/7-reasons-why-Golang-is-the-best-backend-programming-language#4-commandline-and-webserver-together" class="hash-link" aria-label="Direct link to 4. CommandLine and WebServer together." title="Direct link to 4. CommandLine and WebServer together.">​</a></h2>
<p>Using golang you can create binary, which can both start a web server, as well as run in cli as a command line tool.
In fact, major and long-lasting projects are simple executables, which provide command line interface to developers and
include a help for each action.</p>
<p>In large projects which have a lot of calculations, Web server is only a layer that maps requests to these binary files. Mostly,
these layers and separation is not designed due to convenience of MVC frameworks, and the software assumed completely a web flow instead
of logic base and presentation layet.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-signing-and-notarization">5. Signing and Notarization<a href="https://torabi.io/blog/7-reasons-why-Golang-is-the-best-backend-programming-language#5-signing-and-notarization" class="hash-link" aria-label="Direct link to 5. Signing and Notarization" title="Direct link to 5. Signing and Notarization">​</a></h2>
<p>Golang is a proper binary, you can sign it's binaries for Windows and MacOs without any problems. In fact, bundling a node.js app
into an executable file and run it next to an Electron app, caused an MVP to fail in our past.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-different-build-target">6. Different build target<a href="https://torabi.io/blog/7-reasons-why-Golang-is-the-best-backend-programming-language#6-different-build-target" class="hash-link" aria-label="Direct link to 6. Different build target" title="Direct link to 6. Different build target">​</a></h2>
<p>You can create different version of your application using targetting, which gives you the option not only to market for different
people, but not to distribute code which is not needed for all clients.</p>
<p>In case of creating a well built binary, (for example our FireBack product) you can bundle those into many applications and distribute it
several times.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-golang-is-not-that-scary">7. Golang is not that scary.<a href="https://torabi.io/blog/7-reasons-why-Golang-is-the-best-backend-programming-language#7-golang-is-not-that-scary" class="hash-link" aria-label="Direct link to 7. Golang is not that scary." title="Direct link to 7. Golang is not that scary.">​</a></h2>
<p>Many people tend to prefer Python and Node.js because of their scripting simplicity, or re-use the knowledge in web development on the backend side.
This tend to generate unportable projects, which usually have very short lifespan, and need constant maintanance. Learning Golang is not that hard,
and you can create CLI apps and Web apps much easier than you think.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ATS-01 Standard for React Native List based projects]]></title>
            <link>https://torabi.io/blog/ats-01-standard-react-native-list</link>
            <guid>https://torabi.io/blog/ats-01-standard-react-native-list</guid>
            <pubDate>Sun, 08 Jun 2025 18:33:01 GMT</pubDate>
            <description><![CDATA[ATS-01 is a set of rules, which will be granted into any list, if it meets certain level of the conditions.]]></description>
            <content:encoded><![CDATA[<p>ATS-01 is a set of rules, which will be granted into any list, if it meets certain level of the conditions.
Lack of quality in many products which we see, is due to missing full implementation of these rules.
<em>You might already have this rules available in your app</em> - therefor no need to make adjustments just to use this document
as reference.</p>
<p><strong>Technologies</strong>: React Native</p>
<p><strong>Programming Languages</strong>: JavaScript/TypeScript</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-the-lists-are-important">Why the lists are important?<a href="https://torabi.io/blog/ats-01-standard-react-native-list#why-the-lists-are-important" class="hash-link" aria-label="Direct link to Why the lists are important?" title="Direct link to Why the lists are important?">​</a></h2>
<p>Mobile applications are built heavily around lists. In a mobile device, user is usually swiping vertically and less often horizontally.
Thus, software companies need to focus on building better lists which interacts more smoothly.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conditions-to-meet-ats-01">Conditions to meet ATS-01<a href="https://torabi.io/blog/ats-01-standard-react-native-list#conditions-to-meet-ats-01" class="hash-link" aria-label="Direct link to Conditions to meet ATS-01" title="Direct link to Conditions to meet ATS-01">​</a></h2>
<p>Here is the interactive list of ATS-01 standard. ATS-01 is met when the screen must implement or be implemeneted:</p>
<ul>
<li>Only in React Native framework</li>
<li>By FlatList or other virtual list</li>
<li>Error handling for first-fetch strategy</li>
<li>Error handling when a set of data is present to the user</li>
<li>Empty list strategy</li>
<li>Pagination</li>
<li>Skeleton loader</li>
<li>Taking too long indication</li>
<li>Timeout and retry mechanism</li>
<li>Request cancellation on leaving the screen</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="only-in-react-native-framework">Only in React Native framework<a href="https://torabi.io/blog/ats-01-standard-react-native-list#only-in-react-native-framework" class="hash-link" aria-label="Direct link to Only in React Native framework" title="Direct link to Only in React Native framework">​</a></h3>
<p>The application needs to be written in React Native. Android/IOS/Ionic/Xamarin and etc are not accpted in this standard.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="by-flatlist-or-other-virtual-list">By FlatList or other virtual list<a href="https://torabi.io/blog/ats-01-standard-react-native-list#by-flatlist-or-other-virtual-list" class="hash-link" aria-label="Direct link to By FlatList or other virtual list" title="Direct link to By FlatList or other virtual list">​</a></h3>
<p>Starndard only applies to screens which need to show dataset, usually from remote service or bluetooth, WIFI devices.
It does not apply to stationary elements, which are put in <strong>ScrollView</strong></p>
<p>Examples:</p>
<ul>
<li>List of posts</li>
<li>List of images</li>
<li>Bluetooth devices around</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="error-handling-for-first-fetch-strategy">Error handling for first-fetch strategy<a href="https://torabi.io/blog/ats-01-standard-react-native-list#error-handling-for-first-fetch-strategy" class="hash-link" aria-label="Direct link to Error handling for first-fetch strategy" title="Direct link to Error handling for first-fetch strategy">​</a></h3>
<p>Screen needs to have a clear strategy, to show the errors occured while fetching information from remote, or any other
permission issues, requirement in the first list.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="error-handling-when-a-set-of-data-is-present-to-the-user">Error handling when a set of data is present to the user<a href="https://torabi.io/blog/ats-01-standard-react-native-list#error-handling-when-a-set-of-data-is-present-to-the-user" class="hash-link" aria-label="Direct link to Error handling when a set of data is present to the user" title="Direct link to Error handling when a set of data is present to the user">​</a></h3>
<p>Screen should handle in case of subsequent failures of fetching data, or changes to parameters, and show them on top of the list,
as header and give user clear action point to move next steps.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="empty-list-strategy">Empty list strategy<a href="https://torabi.io/blog/ats-01-standard-react-native-list#empty-list-strategy" class="hash-link" aria-label="Direct link to Empty list strategy" title="Direct link to Empty list strategy">​</a></h3>
<p>Screen needs to clearly give user feedback if the remote list is empty.
<strong>It should be different than network failures, other impediments precluding user to understand real data availabilty.</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="pagination">Pagination<a href="https://torabi.io/blog/ats-01-standard-react-native-list#pagination" class="hash-link" aria-label="Direct link to Pagination" title="Direct link to Pagination">​</a></h3>
<p>The screen should load the data from it's remote based on user scroll threshold. Even if the remote source does not have such possiblity,
you need to make a <code>PaginatableArray</code> out of it pass it to this component.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="skeleton-loader">Skeleton loader<a href="https://torabi.io/blog/ats-01-standard-react-native-list#skeleton-loader" class="hash-link" aria-label="Direct link to Skeleton loader" title="Direct link to Skeleton loader">​</a></h3>
<p>On the first pull, you need to have skeleton porportional to the real items implemented. User should not see a loader,
while the screen is opened first time.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="taking-too-long-indication">Taking too long indication<a href="https://torabi.io/blog/ats-01-standard-react-native-list#taking-too-long-indication" class="hash-link" aria-label="Direct link to Taking too long indication" title="Direct link to Taking too long indication">​</a></h3>
<p>In case loading of data is taking longer than usual, there should be indication of that, tell the user that they can
cancel or retry in specific amount of time.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="timeout-and-retry-mechanism">Timeout and retry mechanism<a href="https://torabi.io/blog/ats-01-standard-react-native-list#timeout-and-retry-mechanism" class="hash-link" aria-label="Direct link to Timeout and retry mechanism" title="Direct link to Timeout and retry mechanism">​</a></h3>
<p>It should be giving user message "Pull to retry" in case of failure in first or subsequent requests.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="request-cancellation-on-leaving-the-screen">Request cancellation on leaving the screen<a href="https://torabi.io/blog/ats-01-standard-react-native-list#request-cancellation-on-leaving-the-screen" class="hash-link" aria-label="Direct link to Request cancellation on leaving the screen" title="Direct link to Request cancellation on leaving the screen">​</a></h3>
<p>Screen needs to keep an strategy to clean up remote requests, BLE scanning, or any ongoing process to provide data
in to screen, in case user tried to leave the screen.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Honest comparision of hybrid app vs. Native finally]]></title>
            <link>https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally</link>
            <guid>https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally</guid>
            <pubDate>Sun, 08 Jun 2025 18:33:01 GMT</pubDate>
            <description><![CDATA[When considering the development of an app for your idea or business needs,]]></description>
            <content:encoded><![CDATA[<p>When considering the development of an app for your idea or business needs,
you'll inevitably confront a pivotal question: whether to pursue a hybrid or native approach.
In the internet there are many biased comparison, and after 20 years of being active in software
industry and coding for many different companies, clients and projects I want to enlight
this issue once for all.</p>
<p><strong>If you want build an app, I invite you to be patient, and read this article completely which might save you years of hassle</strong></p>
<p>For those just beginning to contemplate app development with little knowledge of where to
start, it's worth noting that there exist several avenues (setup, ecosystem, or development
framework) for building mobile apps. Some opt for the native route, utilizing
platform-specific tools, while others embrace a hybrid approach, which overlays a
layer enabling the use of a single codebase across multiple platforms, such as Android and iOS.</p>
<p>In this article and accompanying video, we'll delve into the considerations for choosing the
optimal approach for your next application, whether you're collaborating with a development
team or embarking on the journey solo.</p>
<ul>
<li>Understanding the distinctions between native and hybrid development</li>
<li>How do I build cost-effective 2 native apps over other agencies</li>
<li>Overview of tools commonly employed for Android Native, iOS Native,
and prevalent hybrid technologies</li>
<li>Strategies for selecting the most suitable technology stack for your app</li>
<li>How to start building your new app?</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-i-build-cost-effective-2-native-apps-over-other-agencies">How do I build cost-effective 2 native apps over other agencies<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#how-do-i-build-cost-effective-2-native-apps-over-other-agencies" class="hash-link" aria-label="Direct link to How do I build cost-effective 2 native apps over other agencies" title="Direct link to How do I build cost-effective 2 native apps over other agencies">​</a></h2>
<p>Internally, I use a large and significant project called Fireback to serve clients.
Fireback aims to accelerate the development process for native Android and iOS apps by providing
several key features and tools. Here's how Fireback can expedite the creation of native apps
compared to manual development:</p>
<ul>
<li><strong>Code Generation:</strong> Fireback offers powerful code generation tools that automate the creation of boilerplate code for Android and iOS apps. By defining the data model and business logic in a Module2 file, Fireback can generate the necessary code for models, API clients, and other components of the app.</li>
<li><strong>Integrated SDKs:</strong> Fireback provides integrated SDKs for Android and iOS that simplify the process of integrating the backend with the native apps. These SDKs handle communication with the backend API, data serialization, authentication, and other tasks, reducing the amount of manual coding required.</li>
<li><strong>Standardized Architecture:</strong> Fireback promotes a standardized architecture for native apps, ensuring consistency and maintainability across different platforms. By adhering to best practices and conventions, developers can build robust and scalable apps more efficiently.</li>
<li><strong>Prebuilt Components:</strong> Fireback includes prebuilt components and templates for common app features such as user authentication, data fetching, and UI components. Developers can leverage these components to quickly assemble the app's functionality without starting from scratch.</li>
<li><strong>Cross-Platform Support:</strong> While Fireback focuses on native Android and iOS development, it also supports cross-platform frameworks like React Native and Flutter. Developers can use Fireback to generate code for these frameworks, further accelerating the development process and enabling code reuse across platforms.</li>
</ul>
<p>Overall, Fireback streamlines the development of native Android and iOS apps by automating repetitive tasks, providing standardized solutions, and integrating seamlessly with the backend. By leveraging Fireback's features and tools, developers can build high-quality apps faster and more efficiently than manual development methods.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="understanding-the-distinctions-between-native-and-hybrid-development">Understanding the distinctions between native and hybrid development<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#understanding-the-distinctions-between-native-and-hybrid-development" class="hash-link" aria-label="Direct link to Understanding the distinctions between native and hybrid development" title="Direct link to Understanding the distinctions between native and hybrid development">​</a></h2>
<p>Native and hybrid app development are two prevalent approaches for creating mobile
applications, each offering unique advantages and considerations. In native app development,
developers utilize platform-specific languages and tools such as Swift for iOS and Android Java
for Android to build applications tailored specifically for a single operating system.
This approach maximizes performance, integration with device features, and adherence to
platform guidelines, resulting in a polished user experience. On the other hand, hybrid
app development leverages web technologies like JavaScript, HTML, and CSS within frameworks
such as React Native, React Cordova, Flutter, and Xamarin to enable cross-platform compatibility.
While hybrid apps can expedite development and reduce costs by sharing a single
codebase across multiple platforms, they may sacrifice some performance and platform-specific
optimizations. Each approach presents its own set of trade-offs, and the choice between
native and hybrid development depends on factors such as project requirements, budget, and
target audience.</p>
<p>Hybrid apps, while offering cross-platform compatibility and potential cost savings in development,
often incur higher maintenance costs due to several factors. One significant contributor is the
quality of JavaScript and the hybrid framework itself. Unlike native solutions which are optimized
for specific platforms, hybrid apps rely on web technologies wrapped within a framework to
function across multiple platforms. This abstraction layer can introduce performance
inefficiencies and compatibility issues, necessitating ongoing maintenance efforts to address
bugs, optimize performance, and ensure compatibility with platform updates. Consequently,
businesses opting for hybrid development should carefully consider the long-term maintenance
implications and allocate resources accordingly to mitigate potential challenges and ensure the
continued success of their apps.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="performance">Performance:<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#performance" class="hash-link" aria-label="Direct link to Performance:" title="Direct link to Performance:">​</a></h3>
<ul>
<li>Native apps are typically faster and more responsive because they are specifically
optimized for the platform they are built for (iOS or Android). They have direct access
to device-specific features and can leverage the full potential of the device's hardware.</li>
<li>Hybrid apps, on the other hand, often rely on a web view component to render their
user interface, which can introduce some performance overhead compared to native apps.
However, advancements in hybrid frameworks have narrowed this performance gap significantly.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-experience">User Experience:<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#user-experience" class="hash-link" aria-label="Direct link to User Experience:" title="Direct link to User Experience:">​</a></h3>
<ul>
<li>Native apps provide a seamless user experience consistent with the platform's design guidelines.
They can take advantage of native UI components and animations, resulting in a polished look and
feel.</li>
<li>Hybrid apps may not always offer the same level of user experience as native apps.
While they can mimic the appearance of native apps to some extent, they may not fully
replicate the platform-specific behaviors and interactions.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="development-time-and-cost">Development Time and Cost:<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#development-time-and-cost" class="hash-link" aria-label="Direct link to Development Time and Cost:" title="Direct link to Development Time and Cost:">​</a></h3>
<p>Native app development often requires separate codebases for each platform
(Objective-C/Swift for iOS, Java/Kotlin for Android), which can increase development time and cost,
especially if the app needs to be maintained for multiple platforms.
Hybrid app development allows developers to write code once and deploy it across multiple platforms,
potentially reducing development time and cost. However, achieving feature parity across platforms
and optimizing performance may require additional effort.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="access-to-device-features">Access to Device Features:<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#access-to-device-features" class="hash-link" aria-label="Direct link to Access to Device Features:" title="Direct link to Access to Device Features:">​</a></h3>
<ul>
<li>Native apps have direct access to device features such as camera, GPS, accelerometer, and
contacts, allowing developers to create rich, immersive experiences that leverage these
capabilities.</li>
<li>Hybrid apps can access device features through plugins or APIs provided by hybrid frameworks.
While many device features are accessible, there may be limitations or delays in implementing
support for new features compared to native development.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="final-decision-for-native-or-hybrid">Final decision for native or hybrid<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#final-decision-for-native-or-hybrid" class="hash-link" aria-label="Direct link to Final decision for native or hybrid" title="Direct link to Final decision for native or hybrid">​</a></h3>
<p>In the long run, investing in native technologies often proves to be a more prudent choice,
particularly for apps with critical functionalities requiring regular updates, or for businesses
heavily reliant on the quality of their applications. Native solutions offer several advantages,
including superior performance, seamless integration with platform features,
and access to a larger talent pool for ongoing maintenance and feature enhancements.
This ensures the longevity and scalability of your app, especially if you plan to
establish an in-house development team in the future.</p>
<p>However, for those embarking on their journey or seeking to experiment with a more flexible
approach, a hybrid solution can still be viable. Utilizing frameworks like React Native,
I can assist you in building a high-quality app that balances cross-platform compatibility
with performance and user experience. Whether you choose native or hybrid development,
my goal remains consistent: to deliver the best possible solution tailored to your unique
needs and aspirations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overview-of-tools-commonly-employed-for-android-native-ios-native-and-prevalent-hybrid-technologies">Overview of tools commonly employed for Android Native, iOS Native, and prevalent hybrid technologies<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#overview-of-tools-commonly-employed-for-android-native-ios-native-and-prevalent-hybrid-technologies" class="hash-link" aria-label="Direct link to Overview of tools commonly employed for Android Native, iOS Native, and prevalent hybrid technologies" title="Direct link to Overview of tools commonly employed for Android Native, iOS Native, and prevalent hybrid technologies">​</a></h2>
<p>While there are numerous technologies available for app development, I want to focus on the
mainstream here which are common (sorted from most common to least)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="for-apple-devices-native">For Apple Devices (Native)<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#for-apple-devices-native" class="hash-link" aria-label="Direct link to For Apple Devices (Native)" title="Direct link to For Apple Devices (Native)">​</a></h2>
<p>Xcode and Swift form the backbone of iOS app development, offering a comprehensive suite of tools and resources for building native applications exclusively for Apple's ecosystem. Xcode serves as the integrated development environment (IDE), providing features such as code editing, debugging, and interface design. Swift, Apple's modern programming language, is known for its safety, performance, and ease of use. With its concise syntax and powerful features, Swift enables developers to write clean, efficient code while leveraging iOS-specific frameworks for seamless integration with device features like Touch ID, ARKit, and Core ML.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="for-android-devices-native">For Android Devices (Native)<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#for-android-devices-native" class="hash-link" aria-label="Direct link to For Android Devices (Native)" title="Direct link to For Android Devices (Native)">​</a></h2>
<p>Android Java, coupled with the Android SDK, constitutes the foundation of Android app development. Java serves as the primary programming language, offering robust support for object-oriented programming and a vast ecosystem of libraries and frameworks. The Android SDK provides tools for designing user interfaces, accessing device hardware, and managing app resources. Developers can harness the extensive capabilities of Android Java to create feature-rich applications that leverage platform-specific functionalities like notifications, background services, and deep linking.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="react-native-many-devices">React Native (Many devices)<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#react-native-many-devices" class="hash-link" aria-label="Direct link to React Native (Many devices)" title="Direct link to React Native (Many devices)">​</a></h2>
<p>React Native revolutionizes mobile app development by enabling the creation of cross-platform applications using JavaScript and React. Leveraging a single codebase, developers can build apps for both iOS and Android platforms, saving time and resources. React Native utilizes native components under the hood, resulting in high-performance apps with native look and feel. Its hot reloading feature allows for real-time code changes, enhancing productivity during development. Additionally, the vibrant React Native community provides a wealth of third-party libraries and tools for extending functionality and solving common development challenges.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reactjs-with-webview-cordova-android-and-ios-devices">React.js with Webview (Cordova, Android and IOS Devices)<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#reactjs-with-webview-cordova-android-and-ios-devices" class="hash-link" aria-label="Direct link to React.js with Webview (Cordova, Android and IOS Devices)" title="Direct link to React.js with Webview (Cordova, Android and IOS Devices)">​</a></h2>
<p>Embedding React.js with Cordova facilitates the creation of hybrid mobile applications using web technologies like HTML, CSS, and JavaScript. Cordova acts as a bridge, enabling web applications to access native device capabilities through plugins. By embedding React.js within a Cordova project, developers can leverage the power of React's component-based architecture and declarative syntax to build interactive user interfaces. Cordova's extensive plugin ecosystem provides access to a wide range of device features, enabling developers to create hybrid apps with native-like functionality and performance.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flutter-complete-new-system-for-multiple-platfroms">Flutter (Complete new system for multiple platfroms)<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#flutter-complete-new-system-for-multiple-platfroms" class="hash-link" aria-label="Direct link to Flutter (Complete new system for multiple platfroms)" title="Direct link to Flutter (Complete new system for multiple platfroms)">​</a></h2>
<p>Flutter, Google's UI toolkit for building natively compiled applications, enables developers to create beautiful, fast, and expressive apps for iOS, Android, and the web from a single codebase. Flutter employs Dart, a modern, object-oriented programming language, renowned for its simplicity, productivity, and performance. With Flutter's reactive framework and extensive widget library, developers can craft highly customizable user interfaces with smooth animations and seamless scrolling. Hot reload functionality accelerates iteration cycles, enabling rapid prototyping and iteration, while Flutter's rich ecosystem of packages and plugins extends functionality and enhances developer productivity.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="xamarin-c-developer-friendly">Xamarin (C# developer friendly)<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#xamarin-c-developer-friendly" class="hash-link" aria-label="Direct link to Xamarin (C# developer friendly)" title="Direct link to Xamarin (C# developer friendly)">​</a></h2>
<p>Xamarin empowers developers to build cross-platform mobile applications using C# and the .NET framework. Leveraging a shared codebase, developers can target multiple platforms, including iOS, Android, and Windows, while maintaining native performance and user experience. Xamarin.Forms simplifies UI development by providing a common abstraction layer for creating user interfaces that render natively on each platform. Additionally, Xamarin's tight integration with Visual Studio and Xamarin Test Cloud streamlines development, debugging, and testing workflows, accelerating time to market and reducing development overhead.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="strategies-for-selecting-the-most-suitable-technology-stack-for-your-app">Strategies for selecting the most suitable technology stack for your app<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#strategies-for-selecting-the-most-suitable-technology-stack-for-your-app" class="hash-link" aria-label="Direct link to Strategies for selecting the most suitable technology stack for your app" title="Direct link to Strategies for selecting the most suitable technology stack for your app">​</a></h3>
<p>Choosing the appropriate framework largely depends on the individual or team and the company's
circumstances. For instance, if you possess a proficient React Native team or a team skilled
in web development and aim to release a moderately critical app swiftly, React Native might
be an optimal choice. Leveraging my extensive experience in React Native app development,
coupled with AI code generation tools and a robust backend system, I've successfully built
apps in as little as a week, ready for store deployment.</p>
<p>Conversely, for established businesses prioritizing market competitiveness, availability,
performance, and long-term maintenance, I recommend developing two separate native apps
tailored to the specific needs of their target audience. While the development pace may not
match that of a single codebase like React Native, my simultaneous work on Android and iOS
ensures efficient development, supported by a wealth of components, experience, code generation
tools, and pre-solved business logics, mitigating any perceived slowdowns.</p>
<p>Moreover, when teams comprise more than one individual per app, the discrepancy between
native and hybrid development diminishes, particularly when utilizing the Firebase framework.</p>
<p>Another scenario where a single native app may prove more advantageous is when developing a
tool for installers or a stationary app for specific devices, sometimes exclusively for one
platform. Maintaining a native Android or iOS app, although it may seem costlier upfront,
ultimately proves more economical than hybrid alternatives. Additionally, native development
grants greater control over intricate details, which may require extensive effort to implement
in hybrid systems.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-start-building-your-new-app">How to start building your new app?<a href="https://torabi.io/blog/honest-comparision-of-hybrid-app-vs-native-finally#how-to-start-building-your-new-app" class="hash-link" aria-label="Direct link to How to start building your new app?" title="Direct link to How to start building your new app?">​</a></h2>
<p>If you're considering building an app, I'm here to assist you in getting started.
Feel free to reach out to me directly at <a href="mailto:ali-torabian@outlook.com" target="_blank" rel="noopener noreferrer">ali-torabian@outlook.com</a> with your proposal.
Be sure to document your ideas thoroughly, detailing your vision for the app and explaining
the underlying business concept. Let's connect and bring your app idea to life!</p>
<p>Additionally, if you're a developer venturing into mobile app development for the first time,
I recommend checking out <a href="https://github.com/torabian/fireback" target="_blank" rel="noopener noreferrer">https://github.com/torabian/fireback</a>. There, you'll discover a
comprehensive boilerplate and a suite of tools designed to expedite and streamline your
startup journey, ensuring reliability and scalability without the need for frequent rewrites.
Dive in and kickstart your mobile app development journey with confidence!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Stop Chaos! Angular Translations Done Right Once]]></title>
            <link>https://torabi.io/blog/stop-chaos-angular-translations-done-right</link>
            <guid>https://torabi.io/blog/stop-chaos-angular-translations-done-right</guid>
            <pubDate>Sun, 08 Jun 2025 18:33:01 GMT</pubDate>
            <description><![CDATA[Critical problems with ng translate, i18n and others]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="critical-problems-with-ng-translate-i18n-and-others">Critical problems with ng translate, i18n and others<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#critical-problems-with-ng-translate-i18n-and-others" class="hash-link" aria-label="Direct link to Critical problems with ng translate, i18n and others" title="Direct link to Critical problems with ng translate, i18n and others">​</a></h2>
<p>The significance of translations appears to be overlooked, with the second language
often treated as an afterthought in my projects; some even begin with non-English
strings hardcoded in templates, only to encounter challenges later when attempting
to modify them, as the lack of type safety prevents immediate detection of all
occurrences, resulting in an inconsistent user experience where English words may
unexpectedly appear in a Spanish interface,
negatively impacting the brand's reputation.</p>
<p>The ng translate module, while initially a convenient tool for handling translations
in Angular apps, often falls short in several key areas. One prevalent issue is the
prevalence of hardcoded strings within templates, making it challenging to maintain
and update translations efficiently. Additionally, the lack of IntelliSense support
hampers developers' productivity, leading to potential errors and inconsistencies in
translations. Moreover, the module's limited capabilities for managing different
languages result in cumbersome workflows and difficulties in maintaining
language-specific content.</p>
<p>Another significant drawback is the cumbersome process of
storing translations in separate JSON files, which can lead to cluttered project
structures and version control issues. These challenges collectively contribute to a
suboptimal translation experience, urging developers to seek alternative solutions
for their localization needs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="solution-is-simple-and-no-library-is-needed">Solution is simple; And no library is needed<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#solution-is-simple-and-no-library-is-needed" class="hash-link" aria-label="Direct link to Solution is simple; And no library is needed" title="Direct link to Solution is simple; And no library is needed">​</a></h2>
<p>In fact, doing a bullet proof translation mechanism for Angular projects does not need
another library at all. In this tutorial we are going to solve this with two items:</p>
<ul>
<li>Base component for all components in the app</li>
<li>LocaleService which will be handling changes to language and publishing it everywhere</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-you-need-before">What you need before<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#what-you-need-before" class="hash-link" aria-label="Direct link to What you need before" title="Direct link to What you need before">​</a></h2>
<p><strong>You can apply what you learn here to new projects, as well as your existing project</strong></p>
<ul>
<li>
<p>In order to keep up with the training, you need an empty angular 2+ project. I am using
most recent version here, which has 'standalone' components, but if you are using older
version of Angular, there would be no difference.</p>
</li>
<li>
<p>Install fireback v1.1.9 or later. You can find the binaries for different systems here:
<a href="https://github.com/torabian/fireback/releases" target="_blank"></a><a href="https://github.com/torabian/fireback/releases" target="_blank" rel="noopener noreferrer">https://github.com/torabian/fireback/releases</a><a href="https://github.com/torabian/fireback/releases" target="_blank" rel="noopener noreferrer">https://github.com/torabian/fireback/releases</a> for installers.</p>
</li>
<li>
<p>I use the VSCode, and Run On Save extension is enabled. You can run the translation
from CLI as well, but having this extension makes life easier by far.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-verify-you-have-access-to-fireback">Step 1: Verify you have access to fireback<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#step-1-verify-you-have-access-to-fireback" class="hash-link" aria-label="Direct link to Step 1: Verify you have access to fireback" title="Direct link to Step 1: Verify you have access to fireback">​</a></h2>
<p>You need to make sure you have access to fireback binary, either installed globally,
or you put it in the project directory, and ignored the file.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-create-the-localeservice">Step 2: Create the LocaleService<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#step-2-create-the-localeservice" class="hash-link" aria-label="Direct link to Step 2: Create the LocaleService" title="Direct link to Step 2: Create the LocaleService">​</a></h2>
<p>Here's the revised version:</p>
<p>The <code>LocaleService</code> is a simple service that would be used almost everywhere in the project,
with one purpose: to keep and sync the locale data.</p>
<p>In this service, there is an observable called <code>locale$</code> which we will subscribe to in
the component to change the dictionary of translation variables. Additionally, there is
a <code>setLocale</code> function to set the language. For example, <code>setLocale('en')</code> would change
it to English.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Injectable </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@angular/core'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> BehaviorSubject </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'rxjs'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">Injectable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  providedIn</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'root'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">LocaleService</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> localeSubject </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">BehaviorSubject</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name builtin">string</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'en'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  locale$ </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">localeSubject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">asObservable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">setLocale</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">locale</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">localeSubject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">locale</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-create-a-base-component">Step 3: Create a base component<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#step-3-create-a-base-component" class="hash-link" aria-label="Direct link to Step 3: Create a base component" title="Direct link to Step 3: Create a base component">​</a></h2>
<p>Creating a base component is a powerful feature of Angular and TypeScript,
which makes it easy to extend some core features for every component in your project.
If you already have such a component in your project, you can apply the code here to that.
If you're starting fresh, create a new component called <code>base.component.ts</code>.</p>
<p><strong>Important:</strong> You need to use <code>@Directive</code> instead of <code>@Component</code> decorator; otherwise,
Angular will not compile it.</p>
<p>Firstly, we need a variable, such as <code>s</code>, to hold the key translations for the template
or the component. It will be <code>protected</code> so that extending classes can actually access it,
as well as the template file.</p>
<p>Then, we need to inject the <code>LocaleService</code> and an object of translation keys upon construction.
This object will hold translations for all languages (as you will see later after we generate
the <code>translations.ts</code> file). In this constructor, we will call a <code>handleLocale</code> function,
which is basically a subscription to the locale, and will replace the dictionary of <code>s</code>
content with the selected language."</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-create-strings-folder">Step 4: Create 'strings' folder<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#step-4-create-strings-folder" class="hash-link" aria-label="Direct link to Step 4: Create 'strings' folder" title="Direct link to Step 4: Create 'strings' folder">​</a></h2>
<p>How you organize the translations is up to you, in fact. I prefer to create a <code>strings</code>
folder per module and place all of their translations into that directory.
This way, when I move a module folder to another project or if I want to make
it a library, I won't have to worry about the translations; they're already
solved and attached to the component or module.</p>
<p>On the other hand, if you want to create a <code>strings</code> folder for the entire app,
nothing would stop you.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-5-create-stringsstrings-enyml">Step 5: Create strings/strings-en.yml<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#step-5-create-stringsstrings-enyml" class="hash-link" aria-label="Direct link to Step 5: Create strings/strings-en.yml" title="Direct link to Step 5: Create strings/strings-en.yml">​</a></h2>
<p>It's critical to keep in mind that the Fireback Language Editor module assumes English
as the primary language of the app. Simply put, English must be present, and other languages
will be synced with keys from that one.</p>
<p>Now, let's put the <code>content</code> inside the YAML.
<strong>All translation keys must go under the <code>content</code> key</strong>,
otherwise they will not be considered translations.</p>
<p>If you are not familiar with YAML, think of it as JSON without quotes, and remember:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">content</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">loading</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Loading</span><span class="token punctuation" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">done</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Done </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">)</span><br></span></code></pre></div></div>
<p>Is different from the code below. (Basically intention is super important)</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">content</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">loading</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Loading</span><span class="token punctuation" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">done</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Done </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">)</span><br></span></code></pre></div></div>
<p>So far, this was all the necessary steps we needed to take for translating our app.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-6-use-and-config-fireback-language-generator">Step 6: Use and config fireback language generator<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#step-6-use-and-config-fireback-language-generator" class="hash-link" aria-label="Direct link to Step 6: Use and config fireback language generator" title="Direct link to Step 6: Use and config fireback language generator">​</a></h2>
<p>Now we need to use the Fireback language generator to simplify key generation for us.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fireback gen strings --path ./src/app/components/loader-sample/strings/strings-en.yml --targets ts --langs pl,fa</span><br></span></code></pre></div></div>
<p>This command will generate two additional files in the same directory:
<code>strings-pl.yml</code> and <code>strings-fa.yml</code>. If you open them, you will see identical
content to your <code>strings-en.yml</code>.</p>
<p>Also in the same directory, you will find a <code>translations.ts</code> file.
It contains content similar to the snippet below, which has generated TypeScript
constants for all three languages and exported them as <code>strings</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-7-make-this-automated-with-vscode-run-on-save">Step 7: Make this automated with VSCode run-on-save<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#step-7-make-this-automated-with-vscode-run-on-save" class="hash-link" aria-label="Direct link to Step 7: Make this automated with VSCode run-on-save" title="Direct link to Step 7: Make this automated with VSCode run-on-save">​</a></h2>
<p>Using the CLI each time for building the translations is cumbersome. Therefore, we utilize the "Run on save" extension in VSCode, which you can install.</p>
<p>Then, in our <code>settings.json</code> in VSCode, we need to add these rules.
(If you've never modified this file, create a folder named <code>.vscode</code> at the root
of your project and add <code>settings.json</code> inside it.)</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "emeraldwalk.runonsave": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "commands": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "match": "strings-([a-z][a-z]).yml$",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "cmd": "fireback gen strings --path ${file} --langs en,fa"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>It would basically detect any <code>strings-xx.yml</code> change in the project, and will run strings
compiler for you.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-8-use-translations">Step 8: Use translations<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#step-8-use-translations" class="hash-link" aria-label="Direct link to Step 8: Use translations" title="Direct link to Step 8: Use translations">​</a></h2>
<p>At this stage, we're essentially ready to utilize the translation file.
In any component that extends from <code>BaseComponent</code>, you'll be able to pass <code>strings</code> and
access the <code>s</code> variable both inside the component and in the template.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Component </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@angular/core'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> BaseComponent </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../base.component'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> LocaleService </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../../locale.service'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> strings </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./strings/translations'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">Component</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  selector</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'app-loader-sample'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  standalone</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  imports</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  templateUrl</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./loader-sample.component.html'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  styleUrl</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./loader-sample.component.scss'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">LoaderSampleComponent</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">BaseComponent</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  override s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> strings</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> locale</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> LocaleService</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">locale</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> strings</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>And you can access <code>s</code> and all the keys type-safely in HTML templates. <em>As you've noticed</em>,
we actually do not need to pipe the translations at all, and this is a significant benefit
both in terms of performance and code cleanliness.</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">{{ s.loading }}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://torabi.io/blog/stop-chaos-angular-translations-done-right#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>To summarize, we have just created a robust system for adding translations to our Angular app.
This method will help prevent many errors, such as missing keys in certain
languages and hard-coded strings for translation.</p>
<p>The Fireback Strings CLI offers additional options that you may want to explore on your own.
This feature is available starting from Fireback v1.1.9</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Stop Chaos! React & React Native Translations Done Right Once]]></title>
            <link>https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right</link>
            <guid>https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right</guid>
            <pubDate>Sun, 08 Jun 2025 18:33:01 GMT</pubDate>
            <description><![CDATA[Critical problems with usual react translation libraries, i18n and others]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="critical-problems-with-usual-react-translation-libraries-i18n-and-others">Critical problems with usual react translation libraries, i18n and others<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#critical-problems-with-usual-react-translation-libraries-i18n-and-others" class="hash-link" aria-label="Direct link to Critical problems with usual react translation libraries, i18n and others" title="Direct link to Critical problems with usual react translation libraries, i18n and others">​</a></h2>
<p>The significance of translations appears to be overlooked, with the second language
often treated as an afterthought in my projects; some even begin with non-English
strings hardcoded in templates, only to encounter challenges later when attempting
to modify them, as the lack of type safety prevents immediate detection of all
occurrences, resulting in an inconsistent user experience where English words may
unexpectedly appear in a Spanish interface,
negatively impacting the brand's reputation.</p>
<p>The i18n module, while initially a convenient tool for handling translations
in React and React Native apps, often falls short in several key areas. One prevalent issue is the
prevalence of hardcoded strings within templates, making it challenging to maintain
and update translations efficiently. Additionally, the lack of IntelliSense support
hampers developers' productivity, leading to potential errors and inconsistencies in
translations. Moreover, the module's limited capabilities for managing different
languages result in cumbersome workflows and difficulties in maintaining
language-specific content.</p>
<p>Another significant drawback is the cumbersome process of
storing translations in separate JSON files, which can lead to cluttered project
structures and version control issues. These challenges collectively contribute to a
suboptimal translation experience, urging developers to seek alternative solutions
for their localization needs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="solution-is-simple-and-no-library-is-needed">Solution is simple; And no library is needed<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#solution-is-simple-and-no-library-is-needed" class="hash-link" aria-label="Direct link to Solution is simple; And no library is needed" title="Direct link to Solution is simple; And no library is needed">​</a></h2>
<p>In fact, doing a bullet proof translation mechanism for React and React Native projects
does not need another library at all. In this tutorial we are going to solve this with a single hook:</p>
<ul>
<li>Defining <code>useS</code> hook to use a string object.</li>
<li>Defining <code>useLocale</code> hook to keep locale settings, and also detect locale based on
the user OS settings or browser settings.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-you-need-before">What you need before<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#what-you-need-before" class="hash-link" aria-label="Direct link to What you need before" title="Direct link to What you need before">​</a></h2>
<p><strong>You can apply what you learn here to new projects, as well as your existing project</strong></p>
<ul>
<li>
<p>Install fireback v1.1.9 or later. You can find the binaries for different systems here:
<a href="https://github.com/torabian/fireback/releases" target="_blank"></a><a href="https://github.com/torabian/fireback/releases" target="_blank" rel="noopener noreferrer">https://github.com/torabian/fireback/releases</a> for installers
binary, and you can place it inside your project folder and ignore it. <strong>You can technically implement your own code to mimic the behavior later.</strong></p>
</li>
<li>
<p>I use the VSCode, and "Run On Save extension" is enabled. You can run the translation
from CLI as well, but having this extension makes life easier by far.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-verify-you-have-access-to-fireback">Step 1: Verify you have access to fireback<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#step-1-verify-you-have-access-to-fireback" class="hash-link" aria-label="Direct link to Step 1: Verify you have access to fireback" title="Direct link to Step 1: Verify you have access to fireback">​</a></h2>
<p>You need to make sure you have access to fireback binary, either installed globally,
or you put it in the project directory, and ignored the file.</p>
<p>Fireback also could be installed on npm using `npm i -D fireback-tools'. Make sure you
install it as dev dependency, so it's binaries do not bundle with react native apps.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-create-uselocale-hook">Step 2: Create useLocale hook<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#step-2-create-uselocale-hook" class="hash-link" aria-label="Direct link to Step 2: Create useLocale hook" title="Direct link to Step 2: Create useLocale hook">​</a></h2>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useLocale</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lang</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setLang</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'en'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// further implementation to change locale, or detect based on the browser</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> lang </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-create-the-uses-hook">Step 3: Create the useS hook.<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#step-3-create-the-uses-hook" class="hash-link" aria-label="Direct link to Step 3: Create the useS hook." title="Direct link to Step 3: Create the useS hook.">​</a></h2>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> useLocale </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./useLocale"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// This typescript generic is important, to use strongly typed translation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// keys</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">useS</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name constant" style="color:#36acaa">T</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">T</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * This could be your own definition of the locale language</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * This variable usually should include the current language in the app</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * such as 'en', or 'fa', etc.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * you might also extend it to separate the language-locale such as en-us</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * i haven't done yet due to no need</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> lang </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useLocale</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * Here we check if there lang is anything other than en, and in translation</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * files we have such thing with a $ prefix - which auto generated by fireback</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * we will access them instead. useS function will return always T,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * so all the translations will be typesafe anyway from typescript compiler</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * perspective</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">lang </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> lang </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"en"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> v</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"$"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> lang</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> v</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> v</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"$"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> lang</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-create-strings-folder">Step 4: Create 'strings' folder<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#step-4-create-strings-folder" class="hash-link" aria-label="Direct link to Step 4: Create 'strings' folder" title="Direct link to Step 4: Create 'strings' folder">​</a></h2>
<p>How you organize the translations is up to you, in fact. I prefer to create a <code>strings</code>
folder per module and place all of their translations into that directory.
This way, when I move a module folder to another project or if I want to make
it a library, I won't have to worry about the translations; they're already
solved and attached to the component or module.</p>
<p>On the other hand, if you want to create a <code>strings</code> folder for the entire app,
nothing would stop you.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-5-create-stringsstrings-enyml">Step 5: Create strings/strings-en.yml<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#step-5-create-stringsstrings-enyml" class="hash-link" aria-label="Direct link to Step 5: Create strings/strings-en.yml" title="Direct link to Step 5: Create strings/strings-en.yml">​</a></h2>
<p>It's critical to keep in mind that the Fireback Language Editor module assumes English
as the primary language of the app. Simply put, English must be present, and other languages
will be synced with keys from that one.</p>
<p>Now, let's put the <code>content</code> inside the YAML.
<strong>All translation keys must go under the <code>content</code> key</strong>,
otherwise they will not be considered translations.</p>
<p>If you are not familiar with YAML, think of it as JSON without quotes, and remember:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">content</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">loading</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Loading</span><span class="token punctuation" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">done</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Done </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">)</span><br></span></code></pre></div></div>
<p>Is different from the code below. (Basically intention is super important)</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">content</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">loading</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Loading</span><span class="token punctuation" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">done</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Done </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">)</span><br></span></code></pre></div></div>
<p>So far, this was all the necessary steps we needed to take for translating our app.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-6-use-and-config-fireback-language-generator">Step 6: Use and config fireback language generator<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#step-6-use-and-config-fireback-language-generator" class="hash-link" aria-label="Direct link to Step 6: Use and config fireback language generator" title="Direct link to Step 6: Use and config fireback language generator">​</a></h2>
<p>Now we need to use the Fireback language generator to simplify key generation for us.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fireback gen strings --path ./src/strings/strings-en.yml --langs pl,fa</span><br></span></code></pre></div></div>
<p>This command will generate two additional files in the same directory:
<code>strings-pl.yml</code> and <code>strings-fa.yml</code>. If you open them, you will see identical
content to your <code>strings-en.yml</code>.</p>
<p>Also in the same directory, you will find a <code>translations.ts</code> file.
It contains content similar to the snippet below, which has generated TypeScript
constants for all three languages and exported them as <code>strings</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-7-make-this-automated-with-vscode-run-on-save">Step 7: Make this automated with VSCode run-on-save<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#step-7-make-this-automated-with-vscode-run-on-save" class="hash-link" aria-label="Direct link to Step 7: Make this automated with VSCode run-on-save" title="Direct link to Step 7: Make this automated with VSCode run-on-save">​</a></h2>
<p>Using the CLI each time for building the translations is cumbersome. Therefore, we utilize the "Run on save" extension in VSCode, which you can install.</p>
<p>Then, in our <code>settings.json</code> in VSCode, we need to add these rules.
(If you've never modified this file, create a folder named <code>.vscode</code> at the root
of your project and add <code>settings.json</code> inside it.)</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// other configuration before</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"emeraldwalk.runonsave"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"commands"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"match"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"strings-([a-z][a-z]).yml$"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"cmd"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"fireback gen strings --path ${file} --langs en,fa"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// other configuration after</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>It would basically detect any <code>strings-xx.yml</code> change in the project, and will run strings
compiler for you.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-8-use-translations">Step 8: Use translations<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#step-8-use-translations" class="hash-link" aria-label="Direct link to Step 8: Use translations" title="Direct link to Step 8: Use translations">​</a></h2>
<p>At this stage, the tarnslation dictionary has been created fully, and we can
use them by <code>useS</code> and access the keys on the <code>s</code> object. It's good to keep
the names consistent across the entire project to make it clean.</p>
<p><strong>React.js</strong>:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> strings </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./strings/translations"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">MyComponent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useS</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strings</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">loading</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p><strong>React Native</strong>:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Text</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'react-native'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> strings </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./strings/translations"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">MyComponent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useS</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strings</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Text</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">loading</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">Text</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://torabi.io/blog/stop-chaos-react-and-react-native-translations-done-right#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>To summarize, we have just created a robust system for adding translations to our react or react native app.
This method will help prevent many errors, such as missing keys in certain
languages and hard-coded strings for translation.</p>
<p>The Fireback Strings CLI offers additional options that you may want to explore on your own.
This feature is available starting from Fireback v1.1.9</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Top reasons software teams and companies suffer from their own decisions]]></title>
            <link>https://torabi.io/blog/top-reasons-software-teams-and-companies-suffer-from-their-own-decisions</link>
            <guid>https://torabi.io/blog/top-reasons-software-teams-and-companies-suffer-from-their-own-decisions</guid>
            <pubDate>Sun, 08 Jun 2025 18:33:01 GMT</pubDate>
            <description><![CDATA[When I join a company and I see managers complaining, coders complaining and designer complaining, I see a quite common]]></description>
            <content:encoded><![CDATA[<p>When I join a company and I see managers complaining, coders complaining and designer complaining, I see a quite common
pattern which I tried to not them happen in PixePlux projects and clients.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="use-only-mysql-or-sqlite">Use only MySQL or SQLite<a href="https://torabi.io/blog/top-reasons-software-teams-and-companies-suffer-from-their-own-decisions#use-only-mysql-or-sqlite" class="hash-link" aria-label="Direct link to Use only MySQL or SQLite" title="Direct link to Use only MySQL or SQLite">​</a></h2>
<p>Very often, people get into trouble by just using something weird, such as Postgres, Mongodb, Firebase, or 100 more
database brands out there. In fact, MySQL or SQLite are capable of serving up to 99% of projects, up to facebook level
data (MySQL). Spend a bit of time designing the right database, make two version of app which works both with
SQLite and MySQL - using any orm this is just a config change - and never do not fall into hoax of some amazing database
for a project which never gonna have more than 100 GB of database in decade.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="they-care-about-code-more-than-product">They care about code more than product<a href="https://torabi.io/blog/top-reasons-software-teams-and-companies-suffer-from-their-own-decisions#they-care-about-code-more-than-product" class="hash-link" aria-label="Direct link to They care about code more than product" title="Direct link to They care about code more than product">​</a></h2>
<p>We all read books about how to write "Clean code", so we did read "How to became milioner". The only important perspective
of a software product is how users see that, not how or in which language it's written on.</p>
<p>Programmers usually do not care of software result, they are into topics which language it's used, which framework, which plugin,
things which are only important to them, or maybe their tech leader.</p>
<p>Programmers should do their trial and error and lalaland task in codepen, github personal account, and do not bring any new library,
code style, linting, plugin into the production. I see so often the entire project is stuck in how to use Redux clearly,
and the project which code have 10 screens in 1 week, has gone nowhere in 3 months.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="they-produce-large-size-or-slow-applications">They produce large size or slow applications<a href="https://torabi.io/blog/top-reasons-software-teams-and-companies-suffer-from-their-own-decisions#they-produce-large-size-or-slow-applications" class="hash-link" aria-label="Direct link to They produce large size or slow applications" title="Direct link to They produce large size or slow applications">​</a></h2>
<p>Using wrong tools, you end up having software which consumes more resources than it should, this results in many issues.</p>
<ul>
<li>They need very good computer to write code, run the project.</li>
<li>The application will end up large source and many users loose patience to download - specially if it's not so critical.</li>
<li>They can't ship easily, sign the app.</li>
</ul>
<p>An example is projects written in Angular (Web) framework. The bundle size is that much big and rendering is so slow
that every project feels so slow and laggy, not only it ends in user frustration, but also the developers themselves
feel tired looking each time they want change something it takes couple of seconds and they want to start a new project.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="there-is-no-documentation-or-explanation-of-software">There is no documentation or explanation of software<a href="https://torabi.io/blog/top-reasons-software-teams-and-companies-suffer-from-their-own-decisions#there-is-no-documentation-or-explanation-of-software" class="hash-link" aria-label="Direct link to There is no documentation or explanation of software" title="Direct link to There is no documentation or explanation of software">​</a></h2>
<p>Many backends, front-ends, are being created without any explanation. Even a new developer in the same team needs to
go few days into learning curve in order to run the project. Look at all major softwares, Windows, MySQL, Adobe,
they all run without baby sitting from their vendors.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="they-are-not-using-proper-programming-language">They are not using proper programming language<a href="https://torabi.io/blog/top-reasons-software-teams-and-companies-suffer-from-their-own-decisions#they-are-not-using-proper-programming-language" class="hash-link" aria-label="Direct link to They are not using proper programming language" title="Direct link to They are not using proper programming language">​</a></h2>
<p>I did so much of research, and somehow ended up any project which lasted for decades, it's written in C/C++
it's no suprise, anything written in scripting languages, all the time needs maintaince and will not last 1-2 years even.</p>
<p>Due to my personal research these are the only proper tools:</p>
<ul>
<li>Writting Android apps in Java (Not Hybrid, Ionic, Xamarin,...)</li>
<li>Writing Ios apps in ObjectiveC and Swift.</li>
<li>Writing any backend, system service, desktop application in C++, or in worst case Golang</li>
<li>React for frontend (Not Angular, Ember, Vuejs)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="they-are-using-things-they-do-not-need">They are using things they do not need.<a href="https://torabi.io/blog/top-reasons-software-teams-and-companies-suffer-from-their-own-decisions#they-are-using-things-they-do-not-need" class="hash-link" aria-label="Direct link to They are using things they do not need." title="Direct link to They are using things they do not need.">​</a></h2>
<p>Docker, MariaDB, Fireback storage, Elasticbeans talk, CircleCi, Bitrise, Fastlane, and you name it. It seems to many
people they cannot build anything without 80% of thirdparty services. Worlds most important software is written
when none of these existed.</p>
<p>Using these tools, adds up a lot of extra time and overhead to deliver a project, which if it was written in C++ or Golang
would end up 10% of the time.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why to use lottie in React Native mobile development]]></title>
            <link>https://torabi.io/blog/why-use-lottie-in-react-native-mobile-development</link>
            <guid>https://torabi.io/blog/why-use-lottie-in-react-native-mobile-development</guid>
            <pubDate>Sun, 08 Jun 2025 18:33:01 GMT</pubDate>
            <description><![CDATA[Animations are essential for most of user interfaces. Human being naturally are used to see things change in transition,]]></description>
            <content:encoded><![CDATA[<p>Animations are essential for most of user interfaces. Human being naturally are used to see things change in transition,
a leaf is falling down with an speed. No one expecting to see the leaf on the tree, and immediately on the ground.</p>
<p>For the very same reason, we build applications in a way that actions are happening in an animation sequence. Creating
animations in dedicated softwares are easy, for example in AfterEffects, you have a time line, keyframes and tons
of visual tools to create all kind of custom animations you want, and exporting them as Gif or many different formats.</p>
<p><strong>In programming, creating animation is difficult</strong>, most of the time you are not able to see how the animation works
until you run it, and you need to work with scripts, and selecting elements then using JavaScript build those sequences, like:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token maybe-class-name">Animated</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sequence</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// decay, then spring to start and twirl</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token maybe-class-name">Animated</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">decay</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">position</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// coast to a stop</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">velocity</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">x</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> gestureState</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">vx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> gestureState</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">vy</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// velocity from gesture release</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">deceleration</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.997</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token maybe-class-name">Animated</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">parallel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// after decay, in parallel:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token maybe-class-name">Animated</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">spring</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">position</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">toValue</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">x</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// return to start</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token maybe-class-name">Animated</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">timing</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">twirl</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// and twirl</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">toValue</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">360</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// start the sequence group</span><br></span></code></pre></div></div>
<p>Animating using scripts like this might be only option for some actions, but it has drawbacks such as:</p>
<ul>
<li>You are limited. It's only allowing some parameters of elements to be animated, such as transform, opacity</li>
<li>Only a programmer can adjust these. You loose all talent that UI/UX team has built in years.</li>
<li>It's not supporting advanced animations. If you want to create an envelop being closed after user clicking on "Send mail"
button, it's gonna take hours and hours of work, if even possible after all.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="designing-animations-in-aftereffects">Designing animations in AfterEffects<a href="https://torabi.io/blog/why-use-lottie-in-react-native-mobile-development#designing-animations-in-aftereffects" class="hash-link" aria-label="Direct link to Designing animations in AfterEffects" title="Direct link to Designing animations in AfterEffects">​</a></h2>
<p>An alternative to all these problems is to design animations in an advanced tool such as AfterEffecs. Using plugin called lottie,
you can export the 2d motion graphics into a json format, which later allows you to use it in Web, React Native or desktop applications</p>
<p>For example we created PixelPlux logo animated:</p>
<div loop="" path="/blog/pixelplux_logo.json" class="large-animate-preview"></div>
<br>
<p>Or you can take a look at my design for Github logo:</p>
<div loop="" path="/blog/github_logo_animated_ali_torabi.json" class="large-animate-preview"></div>
<br>
<br>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="effects-on-the-mobile-project">Effects on the Mobile Project.<a href="https://torabi.io/blog/why-use-lottie-in-react-native-mobile-development#effects-on-the-mobile-project" class="hash-link" aria-label="Direct link to Effects on the Mobile Project." title="Direct link to Effects on the Mobile Project.">​</a></h2>
<p>Using Lottie animations, specially well built ones, increases the user experience quality, for tasks such as
processing a payment, searching for content, giving news bullitens and many more.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Zatrzymaj Chaos! Tłumaczenia Angular Wykonane Jak Trzeba Raz]]></title>
            <link>https://torabi.io/blog/zatrzymaj-chaos-tłumaczenia-angular-wykonane-poprawnie</link>
            <guid>https://torabi.io/blog/zatrzymaj-chaos-tłumaczenia-angular-wykonane-poprawnie</guid>
            <pubDate>Sun, 08 Jun 2025 18:33:01 GMT</pubDate>
            <description><![CDATA[Krytyczne problemy z ng translate, i18n i innymi]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="krytyczne-problemy-z-ng-translate-i18n-i-innymi">Krytyczne problemy z ng translate, i18n i innymi<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#krytyczne-problemy-z-ng-translate-i18n-i-innymi" class="hash-link" aria-label="Direct link to Krytyczne problemy z ng translate, i18n i innymi" title="Direct link to Krytyczne problemy z ng translate, i18n i innymi">​</a></h2>
<p>Znaczenie tłumaczeń wydaje się być pomijane, a drugi język często traktowany jest po macoszemu w moich projektach; niektóre z nich nawet zaczynają się od niewłaściwych ciągów znaków w szablonach, aby później napotkać trudności przy próbie ich modyfikacji, ponieważ brak bezpieczeństwa typów uniemożliwia natychmiastowe wykrycie wszystkich wystąpień, co prowadzi do niejednolitego doświadczenia użytkownika, gdzie angielskie słowa mogą niespodziewanie pojawić się w hiszpańskim interfejsie, co negatywnie wpływa na reputację marki.</p>
<p>Moduł ng translate, choć początkowo wygodne narzędzie do obsługi tłumaczeń w aplikacjach Angular, często zawodzi w kilku kluczowych obszarach. Jednym z powszechnych problemów jest obecność statycznych ciągów znaków w szablonach, co sprawia, że utrzymanie i aktualizacja tłumaczeń staje się wyzwaniem. Dodatkowo, brak wsparcia IntelliSense ogranicza produktywność deweloperów, prowadząc do potencjalnych błędów i niekonsekwencji w tłumaczeniach. Ponadto, ograniczone możliwości modułu w zarządzaniu różnymi językami skutkują kłopotliwymi procesami i trudnościami w utrzymaniu treści związanych z językiem.</p>
<p>Innym istotnym problemem jest kłopotliwy proces przechowywania tłumaczeń w oddzielnych plikach JSON, co może prowadzić do zagraconych struktur projektu i problemów z kontrolą wersji. Te wyzwania wspólnie przyczyniają się do niedostatecznego doświadczenia związanego z tłumaczeniami, zmuszając deweloperów do poszukiwania alternatywnych rozwiązań dla swoich potrzeb lokalizacyjnych.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rozwiązanie-jest-proste-i-nie-potrzeba-biblioteki">Rozwiązanie jest proste; I nie potrzeba biblioteki<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#rozwi%C4%85zanie-jest-proste-i-nie-potrzeba-biblioteki" class="hash-link" aria-label="Direct link to Rozwiązanie jest proste; I nie potrzeba biblioteki" title="Direct link to Rozwiązanie jest proste; I nie potrzeba biblioteki">​</a></h2>
<p>W rzeczywistości, stworzenie niezawodnego mechanizmu tłumaczenia dla projektów Angular nie wymaga dodatkowej biblioteki. W tym samouczku rozwiążemy ten problem za pomocą dwóch elementów:</p>
<ul>
<li>Komponentu podstawowego dla wszystkich komponentów w aplikacji</li>
<li>Usługi LocaleService, która będzie obsługiwać zmiany języka i publikować je wszędzie</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="co-potrzebujesz-wcześniej">Co potrzebujesz wcześniej<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#co-potrzebujesz-wcze%C5%9Bniej" class="hash-link" aria-label="Direct link to Co potrzebujesz wcześniej" title="Direct link to Co potrzebujesz wcześniej">​</a></h2>
<p><strong>Możesz zastosować to, czego się nauczysz tutaj do nowych projektów, a także do istniejącego projektu</strong></p>
<ul>
<li>
<p>Aby nadążyć za szkoleniem, potrzebujesz pustego projektu angular 2+.
Używam tutaj najnowszej wersji, która ma 'samodzielne' komponenty, ale jeśli korzystasz
z starszej wersji Angular, nie będzie to miało znaczenia.</p>
</li>
<li>
<p>Zainstaluj fireback v1.1.9 lub nowszą wersję. Installers dla różnych systemów można znaleźć tutaj:
<a href="https://github.com/torabian/fireback/releases" target="_blank"></a><a href="https://github.com/torabian/fireback/releases" target="_blank" rel="noopener noreferrer">https://github.com/torabian/fireback/releases</a></p>
</li>
<li>
<p>Korzystam z VSCode, a rozszerzenie Run On Save jest włączone. Możesz uruchamiać tłumaczenie
również z wiersza poleceń, ale posiadanie tego rozszerzenia znacznie ułatwia życie.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="krok-1-sprawdź-czy-masz-dostęp-do-fireback">Krok 1: Sprawdź, czy masz dostęp do fireback<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#krok-1-sprawd%C5%BA-czy-masz-dost%C4%99p-do-fireback" class="hash-link" aria-label="Direct link to Krok 1: Sprawdź, czy masz dostęp do fireback" title="Direct link to Krok 1: Sprawdź, czy masz dostęp do fireback">​</a></h2>
<p>Musisz upewnić się, że masz dostęp do binariów fireback, czy to zainstalowanych globalnie,
czy też umieszczonych w katalogu projektu i zignorowanych.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="krok-2-stwórz-usługę-localeservice">Krok 2: Stwórz usługę LocaleService<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#krok-2-stw%C3%B3rz-us%C5%82ug%C4%99-localeservice" class="hash-link" aria-label="Direct link to Krok 2: Stwórz usługę LocaleService" title="Direct link to Krok 2: Stwórz usługę LocaleService">​</a></h2>
<p>Oto przekształcona wersja:</p>
<p>Usługa <code>LocaleService</code> jest prostą usługą, która będzie używana niemal wszędzie w projekcie,
z jednym celem: przechowywać i synchronizować dane dotyczące lokalizacji.</p>
<p>W tej usłudze istnieje obserwowalna o nazwie <code>locale$</code>, którą będziemy subskrybować w
komponencie, aby zmienić słownik zmiennych tłumaczeń. Dodatkowo, jest funkcja <code>setLocale</code>,
która ustawia język. Na przykład, <code>setLocale('en')</code> zmieni język na angielski.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Injectable </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@angular/core'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> BehaviorSubject </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'rxjs'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">Injectable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  providedIn</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'root'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">LocaleService</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> localeSubject </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">BehaviorSubject</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name builtin">string</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'en'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  locale$ </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">localeSubject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">asObservable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">setLocale</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">locale</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">localeSubject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">locale</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="krok-3-stwórz-komponent-bazowy">Krok 3: Stwórz komponent bazowy<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#krok-3-stw%C3%B3rz-komponent-bazowy" class="hash-link" aria-label="Direct link to Krok 3: Stwórz komponent bazowy" title="Direct link to Krok 3: Stwórz komponent bazowy">​</a></h2>
<p>Stworzenie komponentu bazowego to potężna funkcja Angulara i TypeScriptu,
która ułatwia rozszerzanie niektórych podstawowych funkcji dla każdego komponentu w projekcie.
Jeśli już masz taki komponent w projekcie, możesz zastosować tutaj kod do niego.
Jeśli zaczynasz od nowa, utwórz nowy komponent o nazwie <code>base.component.ts</code>.</p>
<p><strong>Ważne:</strong> Musisz użyć dekoratora <code>@Directive</code> zamiast <code>@Component</code>; w przeciwnym razie,
Angular nie będzie go kompilować.</p>
<p>Po pierwsze, potrzebujemy zmiennej, na przykład <code>s</code>, aby przechowywać kluczowe tłumaczenia dla szablonu
lub komponentu. Będzie ona <code>chroniona</code>, aby klasy rozszerzają</p>
<p>ce faktycznie miały do niej dostęp,
jak również do pliku szablonu.</p>
<p>Następnie musimy wstrzyknąć <code>LocaleService</code> oraz obiekt kluczów tłumaczeń podczas konstrukcji.
Ten obiekt będzie przechowywał tłumaczenia dla wszystkich języków (jak zobaczysz później, po wygenerowaniu
pliku <code>translations.ts</code>). W konstruktorze będziemy wywoływać funkcję <code>handleLocale</code>,
która jest po prostu subskrypcją do lokalizacji i zastąpi słownik zawartości <code>s</code>
wybranym językiem.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="krok-4-stwórz-folder-strings">Krok 4: Stwórz folder 'strings'<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#krok-4-stw%C3%B3rz-folder-strings" class="hash-link" aria-label="Direct link to Krok 4: Stwórz folder 'strings'" title="Direct link to Krok 4: Stwórz folder 'strings'">​</a></h2>
<p>Jak zorganizujesz tłumaczenia, zależy od Ciebie. Ja preferuję tworzenie folderu <code>strings</code>
dla każdego modułu i umieszczanie wszystkich ich tłumaczeń w tym katalogu.
W ten sposób, gdy przeniosę folder modułu do innego projektu lub chcę go uczynić biblioteką,
nie będę musiał martwić się o tłumaczenia; już są rozwiązane i dołączone do komponentu
lub modułu.</p>
<p>Z drugiej strony, jeśli chcesz utworzyć folder <code>strings</code> dla całej aplikacji, nic Cię nie zatrzyma.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="krok-5-stwórz-plik-stringsstrings-enyml">Krok 5: Stwórz plik strings/strings-en.yml<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#krok-5-stw%C3%B3rz-plik-stringsstrings-enyml" class="hash-link" aria-label="Direct link to Krok 5: Stwórz plik strings/strings-en.yml" title="Direct link to Krok 5: Stwórz plik strings/strings-en.yml">​</a></h2>
<p>Krytyczne jest pamiętanie, że moduł Fireback Language Editor zakłada angielski
jako główny język aplikacji. Innymi słowy, angielski musi być obecny, a inne języki
będą synchronizowane z kluczami z tego.</p>
<p>Teraz umieśćmy <code>treść</code> wewnątrz YAML.
<strong>Wszystkie klucze tłumaczeń muszą być umieszczone pod kluczem <code>content</code></strong>,
w przeciwnym razie nie zostaną one uznane za tłumaczenia.</p>
<p>Jeśli nie jesteś zaznajomiony z YAML, myśl o nim jak o JSON bez cudzysłowów, i pamiętaj:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">content</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">loading</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Loading</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">done</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Ready </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">)</span><br></span></code></pre></div></div>
<p>Jest różny od kodu poniżej. (Podstawowa różnica to wcięcia).</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">content</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">loading</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Ładowanie</span><span class="token punctuation" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">done</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Gotowe </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">)</span><br></span></code></pre></div></div>
<p>Do tej pory to wszystkie niezbędne kroki, które musieliśmy podjąć, aby przetłumaczyć naszą aplikację.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="krok-6-użyj-i-skonfiguruj-generator-języka-fireback">Krok 6: Użyj i skonfiguruj generator języka fireback<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#krok-6-u%C5%BCyj-i-skonfiguruj-generator-j%C4%99zyka-fireback" class="hash-link" aria-label="Direct link to Krok 6: Użyj i skonfiguruj generator języka fireback" title="Direct link to Krok 6: Użyj i skonfiguruj generator języka fireback">​</a></h2>
<p>Teraz musimy użyć generatora języka Fireback do uproszczenia generowania kluczy dla nas.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fireback gen strings --path ./src/app/components/loader-sample/strings/strings-en.yml --targets ts --langs pl,fa</span><br></span></code></pre></div></div>
<p>To polecenie wygeneruje dwa dodatkowe pliki w tym samym katalogu:
<code>strings-pl.yml</code> i <code>strings-fa.yml</code>. Jeśli je otworzysz, zobaczysz identyczną
treść jak w twoim <code>strings-en.yml</code>.</p>
<p>Również w tym samym katalogu znajdziesz plik <code>translations.ts</code>.
Zawiera on treść podobną do fragmentu poniżej, który wygenerował stałe TypeScript
dla wszystkich trzech języków i wyeksportował je jako <code>strings</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="krok-7-zautomatyzuj-to-za-pomocą-vscode-run-on-save">Krok 7: Zautomatyzuj to za pomocą VSCode run-on-save<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#krok-7-zautomatyzuj-to-za-pomoc%C4%85-vscode-run-on-save" class="hash-link" aria-label="Direct link to Krok 7: Zautomatyzuj to za pomocą VSCode run-on-save" title="Direct link to Krok 7: Zautomatyzuj to za pomocą VSCode run-on-save">​</a></h2>
<p>Używanie CLI za każdym razem do budowania tłumaczeń jest kłopotliwe. Dlatego korzystamy z rozszerzenia "Run on save" w VSCode, które możesz zainstalować.</p>
<p>Następnie w pliku <code>settings.json</code> w VSCode musimy dodać te reguły.
(Jeśli nigdy nie modyfikowałeś tego pliku, utwórz folder o nazwie <code>.vscode</code> w głównym katalogu
twojego projektu i dodaj w nim plik <code>settings.json</code>.)</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "emeraldwalk.runonsave": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "commands": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "match": "strings-([a-z][a-z]).yml$",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "cmd": "fireback gen strings --path ${file} --langs en,fa"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>To w zasadzie wykryje każdą zmianę <code>strings-xx.yml</code> w projekcie i uruchomi dla ciebie kompilator ciągów.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="krok-8-użyj-tłumaczeń">Krok 8: Użyj tłumaczeń<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#krok-8-u%C5%BCyj-t%C5%82umacze%C5%84" class="hash-link" aria-label="Direct link to Krok 8: Użyj tłumaczeń" title="Direct link to Krok 8: Użyj tłumaczeń">​</a></h2>
<p>W tej fazie, jesteśmy praktycznie gotowi do wykorzystania pliku tłumaczeń.
W każdym komponencie, który rozszerza <code>BaseComponent</code>, będziesz mógł przekazać <code>strings</code> i
uzyskać dostęp do zmiennej <code>s</code> zarówno wewnątrz komponentu, jak i w szablonie.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Component </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@angular/core'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> BaseComponent </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../base.component'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> LocaleService </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../../locale.service'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> strings </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./strings/translations'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">Component</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  selector</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'app-loader-sample'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  standalone</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  imports</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  templateUrl</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./loader-sample.component.html'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  styleUrl</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./loader-sample.component.scss'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">LoaderSampleComponent</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">BaseComponent</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  override s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> strings</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> locale</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> LocaleService</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">locale</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> strings</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>I możesz uzyskać dostęp do <code>s</code> i wszystkich kluczy bezpiecznie w szablonach HTML. <em>Jak zauważyłeś</em>,
faktycznie nie musimy używać rurki do tłumaczeń w ogóle, co stanowi znaczącą korzyść
zarówno pod względem wydajności, jak i czystości kodu.</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">{{ s.loading }}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="podsumowanie">Podsumowanie<a href="https://torabi.io/blog/zatrzymaj-chaos-t%C5%82umaczenia-angular-wykonane-poprawnie#podsumowanie" class="hash-link" aria-label="Direct link to Podsumowanie" title="Direct link to Podsumowanie">​</a></h2>
<p>Podsumowując, właśnie stworzyliśmy solidny system dodawania tłumaczeń do naszej aplikacji Angular.
Ta metoda pomoże uniknąć wielu błędów, takich jak brakujące klucze w niektórych
językach i twardo zakodowane ciągi dla tłumaczenia.</p>]]></content:encoded>
        </item>
    </channel>
</rss>